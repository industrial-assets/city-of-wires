#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform Push {
    ivec4 dims;
    vec4 scalars0;
    vec4 scalars1;
    vec4 scalars2;
    vec4 scalars3;
} pc;

layout(set = 0, binding = 0) uniform VolumetricParams {
    mat4 view;
    mat4 proj;
    mat4 invView;
    mat4 invProj;
    mat4 viewProj;
    mat4 invViewProj;
    mat4 prevViewProj;
    mat4 invPrevViewProj;
    vec4 cameraPos;
    vec4 prevCameraPos;
    vec4 lightDir;
    vec4 fogColorSigma;
    vec4 params;
    vec4 jitterFrameTime;
} g;

layout(set = 1, binding = 2, rgba16f) uniform image2D scatteringImage;
layout(set = 1, binding = 3, r16f)    uniform image2D transmittanceImage;
layout(set = 1, binding = 4, rgba16f) uniform image2D historyImage;
layout(set = 1, binding = 5)          uniform sampler2D depthTexture;

vec2 clamp01(vec2 v) {
    return clamp(v, vec2(0.0), vec2(1.0));
}

void main() {
    ivec2 extent = imageSize(scatteringImage);
    if (gl_GlobalInvocationID.x >= uint(extent.x) || gl_GlobalInvocationID.y >= uint(extent.y)) {
        return;
    }

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    vec2 extentF = vec2(extent);
    vec2 invExtent = 1.0 / extentF;
    vec2 uv = (vec2(coord) + vec2(0.5)) * invExtent;

    vec4 current = imageLoad(scatteringImage, coord);

    float blendAlpha = clamp(pc.scalars1.x, 0.0, 1.0);
    bool historyValid = pc.scalars1.y > 0.5;

    vec4 historySample = current;

    if (historyValid) {
        float depth = texture(depthTexture, uv).r;

        if (depth > 0.0 && depth < 1.0) {
            vec4 clipCurr = vec4(uv * 2.0 - 1.0, depth, 1.0);
            vec4 viewPos = g.invProj * clipCurr;
            viewPos /= viewPos.w;
            vec4 worldPos = g.invView * viewPos;

            vec4 prevClip = g.prevViewProj * vec4(worldPos.xyz, 1.0);
            if (prevClip.w > 0.0) {
                vec3 prevNDC = prevClip.xyz / prevClip.w;
                vec2 prevUV = prevNDC.xy * 0.5 + 0.5;

                if (all(greaterThanEqual(prevUV, vec2(-0.01))) && all(lessThanEqual(prevUV, vec2(1.01)))) {
                    vec2 prevPix = clamp01(prevUV) * extentF;
                    ivec2 prevCoord = ivec2(clamp(prevPix, vec2(0.0), extentF - vec2(1.0)));
                    historySample = imageLoad(historyImage, prevCoord);
                } else {
                    historyValid = false;
                }
            } else {
                historyValid = false;
            }
        } else {
            historyValid = false;
        }
    }

    if (!historyValid) {
        blendAlpha = 0.0;
        historySample = current;
    }

    vec3 minClamp = current.rgb * pc.scalars2.y;
    vec3 maxClamp = current.rgb * pc.scalars2.z;
    historySample.rgb = clamp(historySample.rgb, minClamp, maxClamp);

    vec4 blended = mix(current, historySample, blendAlpha);

    imageStore(historyImage, coord, blended);
    imageStore(scatteringImage, coord, blended);
    imageStore(transmittanceImage, coord, vec4(blended.a));
}


